public class Note {
	float ampStart, ampEnd, ampNow;
	float attack, sustain;
	boolean isOn;
	int fStart, fEnd;
	int c;
	
	public Note() {
		t = 0;
    }
	
	public float getAttack() {
		return this.attack;
	}
	
	public float getSustain() {
		return this.sustain;
	}
	
	public void on(float amp, int frameCount) {
		// handle note on
		isOn = true;
		ampStart = amp;
		fStart = frameCount;
	}
	
	public void off() {
		// handle note off
		isOn = false;
		ampEnd = parent.amplitudes[t];
		fEnd = parent.frameCount;
		sustain = Math.abs(ampStart-ampEnd)/(fEnd-fStart);
	}
	
	public void update(boolean doRenderGrid, boolean useSustain) {
		// update midi, amp, attack and sustain
		ampNow = parent.amplitudes[t];
		if (isOn) {
			b = PApplet.map(ampNow, 0.0f, 1.0f, 20.0f, 150.0f);
		} else {
			if (!useSustain) {
				b = Math.round(b);
				if(b>10) { b--; }
			} else {
				fadeOut(b, 10);
			}
		}
		if (doRenderGrid) render();		
	}
	
	private void fadeOut(float start, float target) {
		b = target - (start*sustain);
		if (b <= target) b = target;
	}
}