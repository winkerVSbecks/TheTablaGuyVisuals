import netP5.*;
import processing.core.*;
import themidibus.*;
import oscP5.*;

@SuppressWarnings("serial")
public class MainApp extends PApplet {
	 
    MidiBus myBus;
    OscP5 oscP5;
    NetAddress myRemoteLocation;
    
    Note[] notes = new Note [128];
    Key[] keys = new Key [14];
    float amplitude;
    int[] freqs = {67, 63, 62, 60, 56, 55, 51, 50, 48, 44, 43, 39, 38, 36};
    boolean isGrid = false;
    boolean useSustain = false;
    
    
    //**********************************************************
    // SETUP
    //**********************************************************
    public void setup() {
        size(640, 640);
        smooth();
        rectMode(CENTER);
        
        MidiBus.list();
        myBus = new MidiBus(this, 0, 0); //"Java Sound Synthesizer"
        
        // Build Note Handlers
        for (int i = 0; i < notes.length; i++) {
			notes[i] = new Note(this, i);
		}
        
        for (int i = 0; i < keys.length; i++) {
			keys[i] = new Key(this, i, freqs[i]);
		}
        
        // Setup liveOSC
        oscP5 = new OscP5(this, 9001);
        myRemoteLocation = new NetAddress("localhost", 9000);
        oscP5.plug(this, "meters", "/live/track/meter");
    }
 
    
    //**********************************************************
    // DRAW
    //**********************************************************
    public void draw() {
//        background(0, 43, 54);
        fill(0, 43, 54, 5);
        rect(width/2, height/2, width, height);
        noStroke();
        if (isGrid) {
	         // Update all midi notes 
	        for (int i = 0; i < notes.length; i++) {
				notes[i].update(amplitude, isGrid, useSustain);
			}
        } else {   
	        //  Update midi notes and render keys
	        for (int i = 0; i < keys.length; i++) {
	        	int ik = keys[i].freq;
	        	println(ik + " " + keys[i].isNoteOn);
	        	notes[ik].update(amplitude, false, useSustain);
	        	keys[i].update(notes[ik].ampNow, notes[ik].isNoteOn);
			}
        }
    }
    
    
    //**********************************************************
    // Handle MIDI Calls
    //**********************************************************
    public void noteOn(int channel, int pitch, int velocity) {
    	println("note on: "+pitch +" "+ velocity+ " " + amplitude);
    	notes[pitch].on(amplitude);
	}

    public void noteOff(int channel, int pitch, int velocity) {
		println("note off: "+pitch +" "+ velocity);
		notes[pitch].off(amplitude);
	}
    
    
    //**********************************************************
    // Handle OSC Calls
    //**********************************************************
    public void oscEvent(OscMessage theOscMessage) {
	  //println("addrpattern: "+theOscMessage.addrPattern());
	}
    
    public void meters(int track, int channel, float value) {
    	amplitude = value;
//    	println("track: "+track+" channel: "+ channel+" value: "+value);
//    	println("-----");
    }
    
    
    //**********************************************************
    // Input Handelers
    //**********************************************************
    public void keyPressed() {
    	if (key == 'm' || key == 'M') {
    		isGrid = !isGrid;
    	}
    	if (key == 's' || key =='S') {
    		useSustain = !useSustain;
    	}
    }
    
    
    //**********************************************************
    // MAIN
    //**********************************************************
    public static void main(String args[]) {
    	PApplet.main(new String[] { /*"--present",*/ "MainApp" });
    }
}







