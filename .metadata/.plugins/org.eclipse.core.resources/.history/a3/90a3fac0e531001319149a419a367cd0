/**********************************************************************************************

 	Each song consists of the following parameter:
 		- Expected MIDI notes to monitor (coming from Ableton)
 		- Audio channel to monitor
 		- The type of visuals to render
 	
 	The note gives access to:
 	 - Is note on or off
 	 - Attack: based on the amplitude from the chosen audio channel (0 - 1)
 	 - Sustain: time needed to fade out once the note turns off
 	   
 	 Sustain can be handles in two ways:
 	 	- Measuring amp. and frame count values on note on and note off. Then calculating the
 	 	  velocity as: (delta amplitude)/(delta frame-count)
 	 	- Simple fade-out at a constant velocity Ð independent of the amp change.

**********************************************************************************************/	

import java.util.ArrayList;
import processing.core.PApplet;

public class Song {
	
	int t;
	int[] range;
	Note[] notes;
	PApplet p;
	String name;
	ArrayList<Object> visuals;
	
	public Song(PApplet _p, Class<?> _type, String _name, Note[] _notes, int[] _range, int _t) {
		name = _name;
		p = _p;
		notes = _notes;
		range = _range;
		t = _t;
		for (int i = 0; i < range.length; i++) {
			Note note = notes[range[i]];
			visuals.add(new Cluster(p, note));
		}
	}
	
	public void draw() {
		for(Cluster cluster: clusters) {
			cluster.draw();
		}
	}
}
