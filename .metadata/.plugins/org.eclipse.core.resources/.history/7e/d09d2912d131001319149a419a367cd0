/***********************************************
 Original Code From:
 Custom 3D Geometry by Amnon Owed (May 2013)
 https://github.com/AmnonOwed
 http://vimeo.com/amnon
 ***********************************************/
import processing.core.PApplet;
import processing.core.PVector;
import processing.core.PConstants;

// custom class to create a flying pyramid
public class Pyramid {
	MainApp p;
	PVector[] v;
	int[] c = new int[5]; 
	float pHeight, pRadius;
	float speed, transparency; 
	float x, y, z; 
	float MAXSPEED = 50; 

	Pyramid(MainApp _p, float pHeight, float pRadius) {
		p = _p;
		v = new PVector[5];
		this.pHeight = pHeight/2; 
		this.pRadius = pRadius; 
		speed = p.random(MAXSPEED/8, MAXSPEED); 
		createPyramid(); 
		z = p.random(-5000, 750); 
		reset(); 
	}

	void createPyramid() {
		v[0] = new PVector(0, -pHeight, 0);                                      							// top of the pyramid
		v[1] = new PVector(pRadius*PApplet.cos(PConstants.HALF_PI), pHeight, pRadius*PApplet.sin(PConstants.HALF_PI));  // base point 1
		v[2] = new PVector(pRadius*PApplet.cos(PConstants.PI), pHeight, pRadius*PApplet.sin(PConstants.PI));            // base point 2
		v[3] = new PVector(pRadius*PApplet.cos(1.5f*PConstants.PI), pHeight, pRadius*PApplet.sin(1.5f*PConstants.PI));  // base point 3
		v[4] = new PVector(pRadius*PApplet.cos(PConstants.TWO_PI), pHeight, pRadius*PApplet.sin(PConstants.TWO_PI));    // base point 4
	}

	void update() {
		z += speed; 
		// if beyond the camera, reset() and start again
		if (z > 750) { z = -5000; reset(); } 
		// far away slowly increase the transparency, within range is fully opaque
		transparency = z < -2500 ? PApplet.map(z, -5000, -2500, 0, 255) : 255; 
	}

	// displays the shape  
	void display() {
		p.pushMatrix(); 

			p.translate(x, y, z); 
			p.rotateY(x + p.frameCount*0.01f); 
			p.rotateX(y + p.frameCount*0.02f); 
	
			// draw the 4 side triangles of the pyramid
			p.beginShape(PConstants.TRIANGLE_FAN); 
				for (int i=0; i<5; i++) {
					p.fill(c[i], transparency); // use the color, but with the given z-based transparency
					p.vertex(v[i].x, v[i].y, v[i].z); // set the vertices based on the object coordinates defined in the createShape() method
				}
				// add the 'first base vertex' to close the shape
				p.fill(c[1], transparency);
				p.vertex(v[1].x, v[1].y, v[1].z);
			p.endShape(); 
	
			// draw the base QUAD of the pyramid
			p.fill(c[1], transparency);
			p.beginShape(PConstants.QUADS);
				for (int i=1; i<5; i++) {
					p.vertex(v[i].x, v[i].y, v[i].z);
				}
			p.endShape(); 

		p.popMatrix(); 
	}

	// randomly sets the xy position of the shape as a whole and the colors of the shape  
	void reset() {
		x = p.random(-2*p.width, 3*p.width); 
		y = p.random(-p.height, 2*p.height); 
		c[0] = p.color(p.random(150, 255), p.random(150, 255), p.random(150, 255)); 
		// randomly set the 4 colors in the base of the shape
		for (int i=1; i<5; i++) {
			c[i] = p.color(p.random(255), p.random(255), p.random(255));
		}
	}
}
